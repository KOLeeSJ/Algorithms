/*
    문제 설명
    ROR 게임은 두 팀으로 나누어서 진행하며, 상대 팀 진영을 먼저 파괴하면 이기는 게임입니다. 따라서, 각 팀은 상대 팀 진영에 최대한 빨리 도착하는 것이 유리합니다.

    지금부터 당신은 한 팀의 팀원이 되어 게임을 진행하려고 합니다. 다음은 5 x 5 크기의 맵에, 
    당신의 캐릭터가 (행: 1, 열: 1) 위치에 있고, 상대 팀 진영은 (행: 5, 열: 5) 위치에 있는 경우의 예시입니다.

    위 그림에서 검은색 부분은 벽으로 막혀있어 갈 수 없는 길이며, 흰색 부분은 갈 수 있는 길입니다. 
    캐릭터가 움직일 때는 동, 서, 남, 북 방향으로 한 칸씩 이동하며, 게임 맵을 벗어난 길은 갈 수 없습니다.
    아래 예시는 캐릭터가 상대 팀 진영으로 가는 두 가지 방법을 나타내고 있습니다.

    첫 번째 방법은 11개의 칸을 지나서 상대 팀 진영에 도착했습니다.

    두 번째 방법은 15개의 칸을 지나서 상대팀 진영에 도착했습니다.

    위 예시에서는 첫 번째 방법보다 더 빠르게 상대팀 진영에 도착하는 방법은 없으므로, 이 방법이 상대 팀 진영으로 가는 가장 빠른 방법입니다.

    만약, 상대 팀이 자신의 팀 진영 주위에 벽을 세워두었다면 상대 팀 진영에 도착하지 못할 수도 있습니다. 
    예를 들어, 다음과 같은 경우에 당신의 캐릭터는 상대 팀 진영에 도착할 수 없습니다.


    게임 맵의 상태 maps가 매개변수로 주어질 때, 캐릭터가 상대 팀 진영에 도착하기 위해서 지나가야 하는 칸의 개수의 최솟값을 return 하도록 solution 함수를 완성해주세요. 
    단, 상대 팀 진영에 도착할 수 없을 때는 -1을 return 해주세요.

    제한사항
    maps는 n x m 크기의 게임 맵의 상태가 들어있는 2차원 배열로, n과 m은 각각 1 이상 100 이하의 자연수입니다.
    n과 m은 서로 같을 수도, 다를 수도 있지만, n과 m이 모두 1인 경우는 입력으로 주어지지 않습니다.
    maps는 0과 1로만 이루어져 있으며, 0은 벽이 있는 자리, 1은 벽이 없는 자리를 나타냅니다.
    처음에 캐릭터는 게임 맵의 좌측 상단인 (1, 1) 위치에 있으며, 상대방 진영은 게임 맵의 우측 하단인 (n, m) 위치에 있습니다.
*/

// BFS 최단거리 탐색 문제, n,m 은 모두 100 이하의 자연수 이므로 최대 연산 횟수 10000번으로 완전탐색 가능

#include <vector>
#include <iostream>
#include <queue>

using namespace std;

vector<int> dx = { 1, -1, 0, 0 }; // 상하
vector<int> dy = { 0, 0, -1, 1 }; // 좌우

int solution(vector<vector<int> > maps) 
{
    int answer = 0;
    int x_limit = maps.size(); 
    int y_limit = maps[0].size();

    // 행렬의 가장 끝 값을 미리 지정해두기 위한 변수 선언

    queue<pair<int,int>> q; // bfs 로 문제를 풀기위해 queue 자료구조 선언
    q.push({ 0,0 }); // 첫 시작은 (0,0) 이므로 큐에 삽입

    while (!q.empty()) { // q안의 모든 값이 사라질 때 종료. 즉, maps의 모든 행렬에 접근한 이후 종료
        int x = q.front().first; 
        int y = q.front().second;

        // 기준점을 지속적으로 초기화 시켜주기 위한 변수 선언

        q.pop();
        // 기준점을 변수에 넣은 이후, 방문했던 q의 값들을 버림

        for (int i = 0; i < 4; i++) { //상하좌우 모든 값들의 경우를 고려하기 위해 반복문을 선언

            int next_x = x + dx[i];
            int next_y = y + dy[i];

            if (next_x < 0 || next_x >= x_limit || next_y < 0 || next_y >= y_limit) continue; // maps의 범위를 벗어난 경우 무시

            if (maps[next_x][next_y] == 0) continue; // maps의 값이 0인 경우 무시

            if (maps[next_x][next_y] == 1) { // maps 내의 값이 1인 경우 이전의 값에 1을 더하여 maps에 새로운 값을 지정
                
                maps[next_x][next_y] = maps[x][y] + 1;
                q.push({ next_x, next_y }); // 새로 방문한 지점을 q에 삽입
                
            }

        }


    }

    if (maps[x_limit - 1][y_limit - 1] == 1) return -1; // maps의 끝에 도달하지 못한 경우는 target 값이 1이므로 -1을 반환

    return maps[x_limit-1][y_limit-1]; // maps의 target 지점에 도달했다면 거리 값으로 새로 선언된 maps의 target 값을 반환
}

int main() {

    cout << solution({ { 1,0,1,1,1 }, { 1,0,1,0,1 }, { 1,0,1,1,1 }, { 1,1,1,0,1 }, { 0,0,0,0,1 } });

    return 0;
}